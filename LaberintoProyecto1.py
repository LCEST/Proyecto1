#Algoritmo Backtracking 
#16/02/2018

#Luis Esturban 17256
#Carlos Chew 17507

#Contiene la forma del laberinto
#1:Pared, 0:Camino
             
fLaberinto ="111100000000000000000000000000000000000000000000000000000000\n" + \
            "111101111111111111111111111111111111111111111111111111111110\n" + \
            "111101111111111111111111111111111111111111111111111111111110\n" + \
            "111101111111111111111111111111111111111111111111111111111110\n" + \
            "111101111111111111111000011111111111111111111111111111111110\n" + \
            "111101111111111111110011011111111111111111111111111111111110\n" + \
            "111101111111111111110111011111111111111111111111111111111110\n" + \
            "111101111111111111111111011111111111111011111111111111111110\n" + \
            "111101101000000000000000000000000011111011111111111111111110\n" + \
            "111101101111111111111111111111111011111011111111111111111110\n" + \
            "111101101111111111111111111111111011111011111111111111111110\n" + \
            "111101101111000000111111111111111011111011111111111111111110\n" + \
            "111101101111011110000001111111111011111011110000111111111110\n" + \
            "111101101111011011111101111111111011111011110110111111111110\n" + \
            "110000101111000000111101111111111011111011110110111111111110\n" + \
            "110110101111111110111101111111111011111011110110111111111110\n" + \
            "110110100000000000111101111111111011111000000110111111111110\n" + \
            "110110111111111111111101111111111011111111111110111111111110\n" + \
            "110110000000000000000001111111111011111111111110111111111110\n" + \
            "110111111111111111111101111111111011111111111110011111111110\n" + \
            "110000111111111110000001111111111011111111111111011111111110\n" + \
            "111110111111111110111111111111111011111111111111000111111110\n" + \
            "111000111111000000111111111111111011111111111111110111111110\n" + \
            "111111111111011111111111111111111011111111111100000111111110\n" + \
            "111111111111011111111111111111111011111111111101111111111110\n" + \
            "111000000000011111111111000000000011111111111101111111111110\n" + \
            "111011110111111111111111011111111111111111111100111111100000\n" + \
            "111011110111111111111111000000000000000000111110111111101111\n" + \
            "111011110000000000000001111111111111111110111110111111001111\n" + \
            "111011111111111111111101111111111111111100111110111110011111\n" + \
            "111011100000001111111101111111111111111101111110111100111111\n" + \
            "111011111111101111111101111111111111111101111000111101111111\n" + \
            "111011111111101111111100000000000000000001111011111101111111\n" + \
            "111011100000001111111111111111111111111111111011111100000111\n" + \
            "111011101111101111111111111111111111111111111011111111110111\n" + \
            "111011101111100000000011111111111111111111111011100000110111\n" + \
            "111011001111111111111011111111111111101111111011101110000111\n" + \
            "111011011000000011111011111111111111101111111011100011111111\n" + \
            "111011011011111011111011111111111111101111111011111000000000\n" + \
            "111011011000011011111000001111111111100000011011111111111110\n" + \
            "111011011111011011111111101111111111111111011011111111111110\n" + \
            "111011011111011011100001101111111111111111011000000000111110\n" + \
            "111011000000011011101101101111111111111111011111111110111110\n" + \
            "111011111011111011101101101111111111111111011111111110111110\n" + \
            "111011111111111011101111100000000000000000000000000010111110\n" + \
            "111011000000000011101111111111111011111111111111111010111110\n" + \
            "111011011111101111100000000000001011111111111111110010111110\n" + \
            "111011010000001111111111111111101011111111111111100110111110\n" + \
            "111011010111111111000000000111101011111111111111001110111110\n" + \
            "111011010111111111011111110111101011111111111000011110111110\n" + \
            "111011010110000001011000010111101011111111111011111110111110\n" + \
            "111011010110111101011011000111100011111111111000110000111110\n" + \
            "111011010110001101011011111111111111111111111110110111111110\n" + \
            "111011010111101101011010000000000000000000000000110111110000\n" + \
            "111011010000001101011010111111111111111111111111110111110111\n" + \
            "111011111110111101011010111111111000000000000000000110000111\n" + \
            "111300000010001101011010111111111011111111111111111111110111\n" + \
            "111111111011111101011000111111111011111111111111111111110111\n" + \
            "111111111000000001001111111100000011111111111111111111110000\n" + \
            "111111111111111111100000000001111111111111111111111111111110"
#Metodo que crea la matriz laberinto a partir de su diseno  
def creaLab(fLaberinto) :
    lista = fLaberinto.split()
    lista = [ x[:-1] if x[-1] == "\n" else x for x in lista]
    lista = [[int(ch) for ch in x] for x in lista]
    return lista
#Metodo para poder imprimir las paredes del laberinto
def imprimeLab(laberinto):
    for x in laberinto:
        for y in x:
            print(y,"")
        print()
laberinto = creaLab(fLaberinto)
#Metodo para recorrer el laberitinto
#Avanza media ves encuentre camino de 1
#Si es 0 no puede avanzar
#Al encontrar el numero 3 llegara a su fin
def recorrido(i, j):
    if laberinto[i][j] == 3:
        return [(i, j)]
    if laberinto[i][j] == 1:
        return []
    laberinto[i][j] = -1
#Para ir al Norte
    if i > 0 and laberinto[i - 1][j] in [0, 3]:
        camino = recorrido(i - 1, j)
        if camino: return [(i, j)] + camino
#Para ir al Este
    if j < len(laberinto[i]) - 1 and laberinto[i][j + 1] in [0, 3]:
        camino = recorrido(i, j + 1)
        if camino: return [(i, j)] + camino
#Para ir al Sur 
    if i < len(laberinto) - 1 and laberinto[i + 1][j] in [0, 3]:
        camino = recorrido(i + 1, j)
        if camino: return [(i, j)] + camino
#Para ir al Oeste
    if j > 0 and laberinto[i][j - 1] in [0, 3]:
        camino = recorrido(i, j - 1) 
        if camino: return [(i, j)] + camino
    return []
for x in recorrido(59,59) : print(x)